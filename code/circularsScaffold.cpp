
#include <math.h>
#include <stdio.h>
#include <stdbool.h>
//returns cartisian point based on one variable
float circlePoint(bool topHalf, float point, float rad) {

	if(topHalf)

		return sqrt(pow(rad, 2) - pow(point, 2));

	else

		return -sqrt(pow(rad, 2) - pow(point, 2));

}

//prints gcode line based on x y position 
void printLine(float X, float Y, float E) {

	printf("G1 X%.2f Y%.2f E%f\n", X, Y, E);

	return;
}

int main()
{
	int speed = 0, gapSpeed = 0, layers = 0, numPoints = 11, numLines;

	float radius = 0, poreSize,z = 0, zFactor = 0.2, e = 0, eFactor = 0.002, pt = 0, offset = 0;
	printf(";Enter pore size: ");
	scanf("%f", &poreSize);
	printf("\n;Enter number of lines: ");
	scanf("%d", &numLines);
	printf("\n;Enter print speed:  ");
	scanf("%d", &speed);
	printf("\n;Enter num layers:  ");
	scanf("%d", &layers);

	radius = ((numLines + 2) * poreSize) / 2;

	printf(";Gcode generated by Ryan Wang's Grid Gcode Generator\n");
	printf("T1\n");
	printf("M82\n");
	printf("M107\n");
	printf("G92 E0\n");
	printf("G21\n");
	printf("G90\n");
	printf("M82\n");
	printf("G92 E0\n");
	printf(";LAYER_COUNT:%d\n", layers);
	for(int l = 1; l <= layers; l++) {

		pt = -radius + poreSize;
		offset = (poreSize / 2);

		printf(";LAYER:%d\n", l-1);
		printf("M107\n");


		if(l == 1 || (l - 1) % 4 ==  0) {
			printf("G0 F%d X%.2f Y%.2f Z%f\n", speed, pt, circlePoint(false, pt, radius), z+= 0.2);
			printf("TYPE:WALL-OUTER\n");

			for(int ct = 0; ct < numLines; ct++ ) {
				if(ct % 2 == 0) {
					printLine(pt, circlePoint(true, pt, radius), e+=eFactor);  //line
					pt+=poreSize;
					printLine(pt, circlePoint(true, pt, radius), e+=eFactor);  //gap? whatever its called
				}
				else {
					printLine(pt, circlePoint(false, pt, radius), e+=eFactor);
					pt+=poreSize;
					printLine(pt, circlePoint(false, pt, radius), e+=eFactor);
				}
			} 
							printLine(pt, circlePoint(true, pt, radius), e+=eFactor);

		}
		else if(l % 2 == 0 && l % 4 != 0) {
			printf("G0 F%d X%.2f Y%.2f Z%f\n", speed, circlePoint(false, pt, radius), pt,z+= 0.2);
			printf("TYPE:WALL-OUTER\n");
			for(int ct = 0; ct < numLines; ct++ ) {
				if(ct % 2 == 0) {
					printLine(circlePoint(true, pt, radius), pt, e+=eFactor);  //line
					pt+=poreSize;
					printLine(circlePoint(true, pt, radius), pt, e+=eFactor);  //gap? whatever its called
				}
				else {
					printLine(circlePoint(false, pt, radius), pt, e+=eFactor);
					pt+=poreSize;
					printLine(circlePoint(false, pt, radius), pt, e+=eFactor);
				}
			}
				printLine(circlePoint(true, pt, radius), pt, e+=eFactor);

		}
		else if((l - 1) % 2 == 0) {
			pt = pt - offset;
			printf("G0 F%d X%.2f Y%.2f Z%f\n", speed, pt, circlePoint(false, pt, radius), z+= 0.2);
			printf("TYPE:WALL-OUTER\n");

			for(int ct = 0; ct < numLines+1; ct++ ) {
				if(ct % 2 == 0) {
					printLine(pt, circlePoint(true, pt, radius), e+=eFactor);  //line
					pt+=poreSize;
					printLine(pt, circlePoint(true, pt, radius), e+=eFactor);  //gap? whatever its called
				}
				else {
					printLine(pt, circlePoint(false, pt, radius), e+=eFactor);
					pt+=poreSize;
					printLine(pt, circlePoint(false, pt, radius), e+=eFactor);
				}
			}
				printLine(pt, circlePoint(false, pt, radius), e+=eFactor);

		}
		else  {

			pt = pt - offset;
			printf("G0 F%d X%.2f Y%.2f Z%f\n", speed, circlePoint(false, pt, radius), pt,z+= 0.2);
			printf("TYPE:WALL-OUTER\n");
			for(int ct = 0; ct < numLines+1; ct++ ) {
				if(ct % 2 == 0) {
					printLine(circlePoint(true, pt, radius), pt, e+=eFactor);  //line
					pt+=poreSize;
					printLine(circlePoint(true, pt, radius), pt, e+=eFactor);  //gap? whatever its called
				}
				else {
					printLine(circlePoint(false, pt, radius), pt, e+=eFactor);
					pt+=poreSize;
					printLine(circlePoint(false, pt, radius), pt, e+=eFactor);
				}
			}
				printLine(circlePoint(false, pt, radius), pt, e+=eFactor);

		}
	
	}
		printf("G92 E0\n");
		printf("M84\n");
		printf("M82\n");
		return 0;
}
